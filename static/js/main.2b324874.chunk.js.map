{"version":3,"sources":["Tasks/tasks.js","App.js","reportWebVitals.js","index.js"],"names":["Tasks","props","status","display","style","className","task","type","onChange","input","value","placeholder","onClick","save","edit","changeStatus","delete","App","useState","setTask","editTask","setEditTask","tasks","setTasks","editedtask","event","target","htmlFor","name","inptask","newtask","id","Date","getTime","addTask","map","lang","index","editHandler","saveHandler","newarr","splice","deleteHandler","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0QAmBeA,EAhBD,SAACC,GACb,IAAIC,EAASD,EAAMC,OACfC,EAAUF,EAAME,QACdC,EAAQ,CAAC,CAACD,QAAS,SAAS,CAACA,QAAS,SAE9C,OACM,sBAAKE,UAAU,QAAf,UACA,4BAAIJ,EAAMK,OACV,uBAAOC,KAAK,OAAOC,SAAUP,EAAMQ,MAAOC,MAAOT,EAAMS,MAAON,MAAOD,EAAUC,EAAM,GAAKA,EAAM,GAAIO,YAAY,mBAChH,wBAAQN,UAAU,YAAYD,MAAOD,EAAUC,EAAM,GAAKA,EAAM,GAAIQ,QAASX,EAAMY,KAAnF,kBACA,wBAAQR,UAAU,OAAOD,MAAOD,EAAUC,EAAM,GAAKA,EAAM,GAAIQ,QAASX,EAAMa,KAA9E,kBACA,wBAAQT,UAAWH,EAAS,YAAc,UAAWU,QAASX,EAAMc,aAApE,SAAmFb,EAAS,YAAc,YAC1G,wBAAQG,UAAU,MAAMO,QAASX,EAAMe,OAAvC,wBCwDSC,MAlEf,WAAgB,IAAD,EAEWC,mBAAS,IAFpB,mBAENZ,EAFM,KAEAa,EAFA,OAGiBD,mBAAS,IAH1B,gCAImBA,mBAAS,KAJ5B,mBAINE,EAJM,KAIIC,EAJJ,OAKaH,mBACxB,IANW,mBAKNI,EALM,KAKCC,EALD,KAsCLC,EAAa,SAACC,GAClBJ,EAAYI,EAAMC,OAAOhB,QAW7B,OACE,sBAAKL,UAAU,MAAf,UACA,sBAAKA,UAAU,OAAf,UACA,uBAAOsB,QAAQ,OAAf,2BACA,uBAAOC,KAAK,OAAOrB,KAAK,OAAOC,SAvCP,SAACiB,GACvBN,EAAQM,EAAMC,OAAOhB,QAsCmCA,MAAOJ,IACjE,wBAAQM,QAAS,kBApCD,SAACiB,GACf,IACEC,EAAO,CAAI,CAACC,IADH,IAAIC,MACMC,UAAW9B,SAAS,EAAOD,QAAO,EAAOI,KAAMuB,IAA3D,mBAAwEP,IACjFC,EAASO,GAiCYI,CAAQ5B,IAA/B,8BAECgB,EAAMa,KAAI,SAACC,EAAMC,GAAP,OACT,cAAC,EAAD,CAAO/B,KAAM8B,EAAK9B,KAAMJ,OAAQkC,EAAKlC,OAAQQ,MAAOU,EAAUX,MAAOe,EACpErB,QAASiC,EAAKjC,QAASW,KAAM,kBA3BZ,SAACuB,GACnB,IAAIjB,EAAQ,YAAOE,GACnBF,EAASiB,GAAOlC,SAAU,EACxBoB,EAASH,GAwByBkB,CAAYD,IAAQxB,KAAM,kBAjB5C,SAACwB,EAAO5B,GAC1B,IAAIW,EAAQ,YAAOE,GACnBF,EAASiB,GAAO/B,KAAOG,EACvBW,EAASiB,GAAOlC,SAAU,EAC1BoB,EAASH,GACTC,EAAY,IAYwDkB,CAAYF,EAAOjB,IACrFJ,OAAQ,kBAnCU,SAACqB,GACrB,IAAIG,EAAO,YAAIlB,GACfkB,EAAOC,OAAOJ,EAAO,GACrBd,EAASiB,GAgCOE,CAAcL,IAAQtB,aAAc,kBAnDjC,SAACsB,GACpB,IAAIG,EAAO,YAAIlB,GACfkB,EAAOH,GAAOnC,QAAUsC,EAAOH,GAAOnC,OACtCqB,EAASiB,GAgDiDzB,CAAasB,KAAcA,UCrD5EM,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.2b324874.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\nimport './tasks.css'\r\n\r\nconst Tasks = (props) => {\r\n  let status = props.status\r\n  let display = props.display\r\n  const style = [{display: \"block\"},{display: \"none\"}]\r\n\r\nreturn(\r\n      <div className=\"tasks\">\r\n      <p>{props.task}</p>\r\n      <input type=\"text\" onChange={props.input} value={props.value} style={display ? style[0] : style[1]} placeholder='Edit your task'/>\r\n      <button className=\"completed\" style={display ? style[0] : style[1]} onClick={props.save}>Save</button>\r\n      <button className='edit' style={display ? style[1] : style[0]} onClick={props.edit}>Edit</button>\r\n      <button className={status ? 'completed' : 'pending'} onClick={props.changeStatus}>{status ? 'Completed' : 'Pending'}</button>\r\n      <button className='del' onClick={props.delete}>Remove</button>\r\n      </div>\r\n)\r\n}\r\nexport default Tasks\r\n","\nimport React, {useState} from 'react'\nimport './App.css';\nimport Tasks from './Tasks/tasks'\n\nfunction App() {\n\n  const [task, setTask] = useState('')\n  const [display, setDisplay] = useState('')\n  const [editTask, setEditTask] = useState('')\n  const [tasks, setTasks] = useState(\n    [\n\n    ])\n    const changeStatus = (index) => {\n      let newarr=[...tasks]\n      newarr[index].status = !newarr[index].status\n      setTasks(newarr)\n    }\n\n    const myChangeHandler = (event) => {\n      setTask(event.target.value)\n    }\n\n    const addTask = (inptask) => {\n      const ml = new Date()\n    let newtask = [{id: ml.getTime(), display: false, status:false, task: inptask}, ...tasks]\n      setTasks(newtask)\n    }\n\n    const deleteHandler = (index) => {\n      let newarr=[...tasks]\n      newarr.splice(index, 1)\n      setTasks(newarr)\n    }\n\n\n    const editHandler = (index) => {\n      let editTask = [...tasks]\n      editTask[index].display = true\n        setTasks(editTask)\n    }\n\n    const editedtask = (event) => {\n      setEditTask(event.target.value)\n    }\n\n    const saveHandler = (index, input) => {\n      let editTask = [...tasks]\n      editTask[index].task = input\n      editTask[index].display = false\n      setTasks(editTask)\n      setEditTask('')\n    }\n\n  return (\n    <div className=\"App\">\n    <div className=\"form\">\n    <label htmlFor=\"task\">Add your task</label>\n    <input name='task' type=\"text\" onChange={myChangeHandler} value={task}/>\n    <button onClick={() => addTask(task)} >Add your task</button>\n    </div>\n    {tasks.map((lang, index) => (\n      <Tasks task={lang.task} status={lang.status} value={editTask} input={editedtask}\n       display={lang.display} edit={() => editHandler(index)} save={() => saveHandler(index, editTask)}\n        delete={() => deleteHandler(index)} changeStatus={() => changeStatus(index)}  key={index}/>\n  ))}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}